-------creating instance with security group---------------
provider "aws" {
  region     = "us-east-1"
  access_key = "Access-key"
  secret_key = "secret-key"
}
resource "aws_instance" "Instance" {
  ami               = "ami-05ffe3c48a9991133"
  instance_type     = "t2.micro"
  key_name          = "lti-mahape-key"
  availability_zone = "us-east-1a"
  security_groups   = ["${aws_security_group.web-server.name}"]

  tags = {
    Name = "mansi-server"
  }
}
resource "aws_security_group" "web-server" {
  name        = "web-server"
  description = "allowing traffic"
  tags = {
    Name = "web-server"
  }
}

resource "aws_vpc_security_group_ingress_rule" "allow_http" {
  security_group_id = aws_security_group.web-server.id

  cidr_ipv4   = "0.0.0.0/0"
  from_port   = 80
  ip_protocol = "tcp"
  to_port     = 80
} 

-------creating ec2 instance with custom root volume---------
resource "aws_security_group" "web_access" {
  name        = "web_access"
  description = "Allow traffic"

  tags = {
    Name = "web_access"
  }
}

resource "aws_vpc_security_group_ingress_rule" "allow_http" {
  security_group_id = aws_security_group.web_access.id
  cidr_ipv4         = "0.0.0.0/0"
  from_port         = 80
  ip_protocol       = "tcp"
  to_port           = 80
}

resource "aws_vpc_security_group_ingress_rule" "allow_ssh" {
  security_group_id = aws_security_group.web_access.id
  cidr_ipv4         = "0.0.0.0/0"
  from_port         = 22
  ip_protocol       = "tcp"
  to_port           = 22
}

resource "aws_vpc_security_group_ingress_rule" "allow_https" {
  security_group_id = aws_security_group.web_access.id
  cidr_ipv4         = "0.0.0.0/0"
  from_port         = 443
  ip_protocol       = "tcp"
  to_port           = 443
}
resource "aws_vpc_security_group_egress_rule" "allow_all_taraffic" {
  security_group_id = aws_security_group.web_access.id
  cidr_ipv4         = "0.0.0.0/0"
  ip_protocol       = "-1"
}

#ec2 instance code starts here
resource "aws_instance" "custom-server" {
  ami               = "ami-05ffe3c48a9991133"
  availability_zone = "us-east-1a"
  instance_type     = "t2.micro"
  security_groups   = ["${aws_security_group.web_access.name}"]
  key_name          = "lti-mahape-key"
  #root disk
  root_block_device {
    volume_size           = "25"
    volume_type           = "gp2"
    delete_on_termination = true
  }

  #additional data disk
  ebs_block_device {
    device_name           = "/dev/xvdb"
    volume_size           = "10"
    volume_type           = "gp2"
    delete_on_termination = true
  }

  user_data = <<-EOF
        #!/bin/bash
        sudo yum install httpd -y
        sudo systemctl start httpd
        sudo systemctl enable httpd
        echo "<h1>custom  webserver using terraform</h1>" | sudo tee /var/www/html/index.html
  EOF
  tags = {
    Name     = "hello-India"
    Stage    = "testing"
    Location = "India"
  }
}
connect and mount 
#lsblk
#mkfs.ext4 /dev/xvdb
#mkdir data
#mount /dev/xvdb data
#cd data
#touch mansi.txt{1..10}

----creating instance with own public key--------
first generate a ssh key and replace it in the below
resource "aws_security_group" "web_access_sg" {
  name        = "web_access_sg"
  description = "Allow traffic"

  tags = {
    Name = "web_access_sg"
  }
}

resource "aws_vpc_security_group_ingress_rule" "allow_http" {
  security_group_id = aws_security_group.web_access_sg.id
  cidr_ipv4         = "0.0.0.0/0"
  from_port         = 80
  ip_protocol       = "tcp"
  to_port           = 80
}

resource "aws_vpc_security_group_ingress_rule" "allow_ssh" {
  security_group_id = aws_security_group.web_access_sg.id
  cidr_ipv4         = "0.0.0.0/0"
  from_port         = 22
  ip_protocol       = "tcp"
  to_port           = 22
}

resource "aws_vpc_security_group_ingress_rule" "allow_https" {
  security_group_id = aws_security_group.web_access_sg.id
  cidr_ipv4         = "0.0.0.0/0"
  from_port         = 443
  ip_protocol       = "tcp"
  to_port           = 443
}
resource "aws_vpc_security_group_egress_rule" "allow_all_taraffic" {
  security_group_id = aws_security_group.web_access_sg.id
  cidr_ipv4         = "0.0.0.0/0"
  ip_protocol       = "-1"
}
#ec2 code for the custom public key
resource "aws_key_pair" "new-key-pair" {
  key_name   = "new-key-pair"
  public_key = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCyTSQkyH1aTWFFkV3sT1yCtejcupNZzeM85ZMtr/t0migAMkuMtdAaZKGdaPLHU412SHsS+Pf316OCI4mDb6JnT8VnpdLQEcunCZ8QdMquuBas1/L+So9C1RO/2nzyJKe+i7m8PVj2Yu9mfVnqEH+OrNlASgJMeL+ZFQzKjc6NzHfYGYW1dZyD2X+Tdd7RRYSZcWoNjiZuVdC7tqEFROOgSNv4MT8LkdqNZYoAuFBWciQ0OHQ+85SnEm50VrAyuHjLm+8wUpBwSeI9mgm5SRi+xZkv9/M82OXZzX4EfG3ZdkMQs9DvCoT6jUmnwxh6VpqR4iilZxvGNv7MS/DejF948XY6g3fwlGSrd7tDJazddUPcKOPeGXtEmSEPv+yIkslFxqKM3qRrIfIxztEnAHyxiNy1sUU3tC5+T2uSkaC43Vtgjm/0iVWJk5YYo0M8eptaaptp3klkiHc0JQskDTNkW6pViG49aT0C/TtzEb5BL0dx8C0HCcarApxttoP7UNM= root@ip-172-31-91-135.ec2.internal"
}

#ec2 instance code starts here
resource "aws_instance" "custom-server" {
  ami               = "ami-05ffe3c48a9991133"
  availability_zone = "us-east-1a"
  instance_type     = "t2.micro"
  security_groups   = ["${aws_security_group.web_access_sg.name}"]
  key_name          = "new-key-pair"

  tags = {
    Name     = "hello-India"
    Stage    = "testing"
    Location = "India"
  }
}

---creating instance using existing sg-------
data "aws_security_group" "previous-sg" {
  id = "sg-0a7bddd59100038b0" #existing security group id
}

#ec2 code for the custom public key
resource "aws_key_pair" "new-key-pair" {
  key_name   = "new-key-pair"
  public_key = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCyTSQkyH1aTWFFkV3sT1yCtejcupNZzeM85ZMtr/t0migAMkuMtdAaZKGdaPLHU412SHsS+Pf316OCI4mDb6JnT8VnpdLQEcunCZ8QdMquuBas1/L+So9C1RO/2nzyJKe+i7m8PVj2Yu9mfVnqEH+OrNlASgJMeL+ZFQzKjc6NzHfYGYW1dZyD2X+Tdd7RRYSZcWoNjiZuVdC7tqEFROOgSNv4MT8LkdqNZYoAuFBWciQ0OHQ+85SnEm50VrAyuHjLm+8wUpBwSeI9mgm5SRi+xZkv9/M82OXZzX4EfG3ZdkMQs9DvCoT6jUmnwxh6VpqR4iilZxvGNv7MS/DejF948XY6g3fwlGSrd7tDJazddUPcKOPeGXtEmSEPv+yIkslFxqKM3qRrIfIxztEnAHyxiNy1sUU3tC5+T2uSkaC43Vtgjm/0iVWJk5YYo0M8eptaaptp3klkiHc0JQskDTNkW6pViG49aT0C/TtzEb5BL0dx8C0HCcarApxttoP7UNM= root@ip-172-31-91-135.ec2.internal"
}

#ec2 instance code starts here
resource "aws_instance" "custom-server" {
  ami                    = "ami-05ffe3c48a9991133"
  availability_zone      = "us-east-1a"
  instance_type          = "t2.micro"
  vpc_security_group_ids = [data.aws_security_group.previous-sg.id]
  key_name               = "new-key-pair"

  tags = {
    Name     = "existing-sg"
    Stage    = "testing"
    Location = "India"
  }
}

----using data parameters---------
data "aws_security_group" "existing-sg" {
  id = "sg-0a7bddd59100038b0" #existing security group id
}

data "aws_ami" "ubuntu" {
  most_recent = true

  filter {
    name   = "name"
    values = ["ubuntu/images/hvm-ssd/ubuntu-jammy-22.04-amd64-server-*"]
  }

  filter {
    name   = "virtualization-type"
    values = ["hvm"]
  }

  owners = ["099720109477"] # Canonical
}
#ec2 code for the custom public key
resource "aws_instance" "web" {
  ami                    = data.aws_ami.ubuntu.id
  instance_type          = "t2.micro"
  availability_zone      = "us-east-1a"
  key_name               = "lti-mahape-key"
  vpc_security_group_ids = [data.aws_security_group.existing-sg.id]
  tags = {
    Name = "ubuntu-ami-instane"
  }
}

-----custom vpc -----------
resource "aws_vpc" "test-vpc" {
  cidr_block = "10.0.0.0/16"
  tags = {
    Name = "test-vpc"
  }
}

# this is Subnet code
resource "aws_subnet" "public-subnet" {
  vpc_id = aws_vpc.test-vpc.id
  availability_zone = "us-east-1a"
  cidr_block = "10.0.0.0/24"
  tags = {
    Name = "Public-subnet"
  }
}
resource "aws_subnet" "private-subnet" {
  vpc_id = aws_vpc.test-vpc.id
  availability_zone = "us-east-1b"
  cidr_block = "10.0.1.0/24"
  tags = {

    Name = "Private-subnet" #security group
  }
}

resource "aws_security_group" "test_access" {
  name = "test_access"
  vpc_id = aws_vpc.test-vpc.id
  description = "allow ssh and http"
  ingress {
    from_port = 80
    to_port = 80
    protocol = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
 }

  ingress {
    from_port = 22
    to_port = 22
    protocol = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port = 0
    to_port = 0
    protocol = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

#security group end here#internet gateway code
resource "aws_internet_gateway" "test-igw" {
vpc_id = aws_vpc.test-vpc.id
  tags = {
    Name = "test-igw"
  }
}

#Public route table code
resource "aws_route_table" "public-rt" {
  vpc_id = aws_vpc.test-vpc.id
  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.test-igw.id
  }
  tags = {
    Name = "public-rt"
  }
}
#route Tatable assosication code
resource "aws_route_table_association" "public-asso" {
  subnet_id = aws_subnet.public-subnet.id
  route_table_id = aws_route_table.public-rt.id
}

#ec2 code
resource "aws_instance" "mansi-server" {
  ami       = "ami-05ffe3c48a9991133"
  subnet_id = aws_subnet.public-subnet.id
  instance_type = "t2.micro"
  security_groups = ["${aws_security_group.test_access.id}"]
  key_name = "lti"
  tags = {
    Name = "test-World"
    Stage = "testing"
    Location = "chennai"
  }
}

##create an EIP for EC2
resource "aws_eip" "mansi-ec2-eip" {
  instance = aws_instance.mansi-server.id
}

#ssh keypair code
resource "aws_key_pair" "lti" {
  key_name = "lti"
  public_key = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDlDbVDkEE8iXbS7Zc/EdPsTiEbEcDAjPYQDMsCgHqIFh1aAQJAKc2LqbLt6WfB5ZIGDOtn8l6JXTgy1RWRAQ8gAw6Rc3q8HDXX323Pd8g9a5fEVZY1S7n2QDYvSzUjhf2c0lHr95ySAuE+TtKcJlcL+pm2KBXmTfQ/qbZ3QNurc9LlpNowWIRL0dwrGHPVUfVQWdUAaqG/W89osV31eI166/AdLmylzM6UiLMVEfNc0hHcg7R7B5LUdrshBlLeKdwEczHnjoIE/5h1rNwjqC5K77K/oDPGsawoKIFHMZjgsVK9Ro0YVaFFvpROLluO3jPxci5zga00CIn35FTNYFe4KSrqtzeI44n6esWUkQMrhMSOwBh0w3FZ4OMOXohkyHcYbFv0PgTRgAlM1Xzj39eXXFfUZ4snRphZ4Zg0prPPyAV0Nm3G9kJZG3sDH2GkdIF0jn/64v/0UM4/A26qpy7Iz4yp6YpGideJtx4Hd5CYeR83bMj3gLNtg1dP8cpjry0= root@ip-172-31-81-54.ec2.internal"
}

###this is database ec2 code
resource "aws_instance" "database-server" {
  ami = "ami-05ffe3c48a9991133"
  subnet_id = aws_subnet.private-subnet.id
  instance_type = "t2.micro"
  security_groups = ["${aws_security_group.test_access.id}"]
  key_name = "lti"
  tags = {
    Name     = "db-World"
    Stage    = "stage-base"
    Location = "delhi"
  }
}

##create a public ip for Nat gateway
resource "aws_eip" "nat-eip" {
}

### create Nat gateway
resource "aws_nat_gateway" "my-ngw" {
  allocation_id = aws_eip.nat-eip.id
  subnet_id     = aws_subnet.public-subnet.id
}

#create private route table
resource "aws_route_table" "private-rt" {
  vpc_id = aws_vpc.test-vpc.id
  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_nat_gateway.my-ngw.id
  }
  tags = {
    Name = "private-rt"
  }
}

##route Tatable assosication code
resource "aws_route_table_association" "private-asso" {
  subnet_id      = aws_subnet.private-subnet.id
  route_table_id = aws_route_table.private-rt.id
}
                         
----------custom vpc using variables-------------------------
provider "aws" {
  region = "us-east-1"
}

#variables
variable "vpc_cidr" {
  default     = "10.0.0.0/16"
  description = "cidr for our custom vpc"
}

variable "subnet_cidr" {
  default     = "10.0.1.0/24"
  description = "cidr for subnet"
}

variable "availability_zone" {
  default     = "us-east-1a"
  description = "AZ for subnet"
}

variable "instance_ami" {
  default     = "ami-05ffe3c48a9991133"
  description = "default ami for instances"
}

variable "instance_type" {
  default     = "t2.micro"
  description = "instance type for ec2"
}

variable "env_tag" {
default     = "production"
  description = "environment tag"
}


# code - creating vpc
resource "aws_vpc" "vpcone" {
  cidr_block = var.vpc_cidr
  tags = {
    Name = "${var.env_tag}"
  }
}

# code - creating IG and attaching it to VPC

resource "aws_internet_gateway" "vpcone-ig" {
  vpc_id = aws_vpc.vpcone.id
  tags = {
    Name = "${var.env_tag}"
  }
}

# code - create subnet inside our vpc
resource "aws_subnet" "subnet_public" {
  vpc_id                  = aws_vpc.vpcone.id
  cidr_block              = var.subnet_cidr
  map_public_ip_on_launch = "true"
  availability_zone       = var.availability_zone
  tags = {
    Name = "${var.env_tag}"
  }
}

# code - creating IG and attaching it to VPC

resource "aws_internet_gateway" "vpcone-ig" {
  vpc_id = aws_vpc.vpcone.id
  tags = {
    Name = "${var.env_tag}"
  }
}

# code - create subnet inside our vpc
resource "aws_subnet" "subnet_public" {
  vpc_id                  = aws_vpc.vpcone.id
  cidr_block              = var.subnet_cidr
  map_public_ip_on_launch = "true"
  availability_zone       = var.availability_zone
  tags = {
    Name = "${var.env_tag}"
  }
}

# code - modifying route
resource "aws_route_table" "rtb_public" {
  vpc_id = aws_vpc.vpcone.id
  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.vpcone-ig.id
  }
  tags = {
Name = "${var.env_tag}"
  }
}


# code - attaching subnets to route table
resource "aws_route_table_association" "rta_subnet_public" {
  subnet_id      = aws_subnet.subnet_public.id
  route_table_id = aws_route_table.rtb_public.id
}


# code - create security group
resource "aws_security_group" "sg_newvpc" {
  name   = "newvpc"
  vpc_id = aws_vpc.vpcone.id

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
  tags = {
Name = "${var.env_tag}"
  }
}

# code - create instance

resource "aws_instance" "test" {
  ami                    = var.instance_ami
  instance_type          = var.instance_type
  subnet_id              = aws_subnet.subnet_public.id
  vpc_security_group_ids = ["${aws_security_group.sg_newvpc.id}"]
  tags = {
    Name = "${var.env_tag}"
  }
}

                        
                                



